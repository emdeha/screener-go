// Code generated by counterfeiter. DO NOT EDIT.
package companyfakes

import (
	"context"
	"sync"

	"github.com/emdeha/screener-go/internal/company"
)

type FakeImporter struct {
	DoImportStub        func(context.Context) error
	doImportMutex       sync.RWMutex
	doImportArgsForCall []struct {
		arg1 context.Context
	}
	doImportReturns struct {
		result1 error
	}
	doImportReturnsOnCall map[int]struct {
		result1 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeImporter) DoImport(arg1 context.Context) error {
	fake.doImportMutex.Lock()
	ret, specificReturn := fake.doImportReturnsOnCall[len(fake.doImportArgsForCall)]
	fake.doImportArgsForCall = append(fake.doImportArgsForCall, struct {
		arg1 context.Context
	}{arg1})
	fake.recordInvocation("DoImport", []interface{}{arg1})
	fake.doImportMutex.Unlock()
	if fake.DoImportStub != nil {
		return fake.DoImportStub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.doImportReturns
	return fakeReturns.result1
}

func (fake *FakeImporter) DoImportCallCount() int {
	fake.doImportMutex.RLock()
	defer fake.doImportMutex.RUnlock()
	return len(fake.doImportArgsForCall)
}

func (fake *FakeImporter) DoImportCalls(stub func(context.Context) error) {
	fake.doImportMutex.Lock()
	defer fake.doImportMutex.Unlock()
	fake.DoImportStub = stub
}

func (fake *FakeImporter) DoImportArgsForCall(i int) context.Context {
	fake.doImportMutex.RLock()
	defer fake.doImportMutex.RUnlock()
	argsForCall := fake.doImportArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeImporter) DoImportReturns(result1 error) {
	fake.doImportMutex.Lock()
	defer fake.doImportMutex.Unlock()
	fake.DoImportStub = nil
	fake.doImportReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeImporter) DoImportReturnsOnCall(i int, result1 error) {
	fake.doImportMutex.Lock()
	defer fake.doImportMutex.Unlock()
	fake.DoImportStub = nil
	if fake.doImportReturnsOnCall == nil {
		fake.doImportReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.doImportReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeImporter) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.doImportMutex.RLock()
	defer fake.doImportMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeImporter) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ company.Importer = new(FakeImporter)
