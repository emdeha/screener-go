// Code generated by counterfeiter. DO NOT EDIT.
package companyfakes

import (
	"context"
	"sync"

	"github.com/emdeha/screener-go/internal/company"
)

type FakeCompanyStore struct {
	InsertCompanyStub        func(context.Context, *company.Company) error
	insertCompanyMutex       sync.RWMutex
	insertCompanyArgsForCall []struct {
		arg1 context.Context
		arg2 *company.Company
	}
	insertCompanyReturns struct {
		result1 error
	}
	insertCompanyReturnsOnCall map[int]struct {
		result1 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeCompanyStore) InsertCompany(arg1 context.Context, arg2 *company.Company) error {
	fake.insertCompanyMutex.Lock()
	ret, specificReturn := fake.insertCompanyReturnsOnCall[len(fake.insertCompanyArgsForCall)]
	fake.insertCompanyArgsForCall = append(fake.insertCompanyArgsForCall, struct {
		arg1 context.Context
		arg2 *company.Company
	}{arg1, arg2})
	fake.recordInvocation("InsertCompany", []interface{}{arg1, arg2})
	fake.insertCompanyMutex.Unlock()
	if fake.InsertCompanyStub != nil {
		return fake.InsertCompanyStub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.insertCompanyReturns
	return fakeReturns.result1
}

func (fake *FakeCompanyStore) InsertCompanyCallCount() int {
	fake.insertCompanyMutex.RLock()
	defer fake.insertCompanyMutex.RUnlock()
	return len(fake.insertCompanyArgsForCall)
}

func (fake *FakeCompanyStore) InsertCompanyCalls(stub func(context.Context, *company.Company) error) {
	fake.insertCompanyMutex.Lock()
	defer fake.insertCompanyMutex.Unlock()
	fake.InsertCompanyStub = stub
}

func (fake *FakeCompanyStore) InsertCompanyArgsForCall(i int) (context.Context, *company.Company) {
	fake.insertCompanyMutex.RLock()
	defer fake.insertCompanyMutex.RUnlock()
	argsForCall := fake.insertCompanyArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeCompanyStore) InsertCompanyReturns(result1 error) {
	fake.insertCompanyMutex.Lock()
	defer fake.insertCompanyMutex.Unlock()
	fake.InsertCompanyStub = nil
	fake.insertCompanyReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeCompanyStore) InsertCompanyReturnsOnCall(i int, result1 error) {
	fake.insertCompanyMutex.Lock()
	defer fake.insertCompanyMutex.Unlock()
	fake.InsertCompanyStub = nil
	if fake.insertCompanyReturnsOnCall == nil {
		fake.insertCompanyReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.insertCompanyReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeCompanyStore) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.insertCompanyMutex.RLock()
	defer fake.insertCompanyMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeCompanyStore) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ company.CompanyStore = new(FakeCompanyStore)
