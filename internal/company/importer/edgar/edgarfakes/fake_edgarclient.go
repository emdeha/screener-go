// Code generated by counterfeiter. DO NOT EDIT.
package edgarfakes

import (
	"context"
	"sync"

	edgarimporter "github.com/emdeha/screener-go/internal/company/importer/edgar"
)

type FakeEDGARClient struct {
	GetBulkDataStub        func(context.Context) ([]byte, error)
	getBulkDataMutex       sync.RWMutex
	getBulkDataArgsForCall []struct {
		arg1 context.Context
	}
	getBulkDataReturns struct {
		result1 []byte
		result2 error
	}
	getBulkDataReturnsOnCall map[int]struct {
		result1 []byte
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeEDGARClient) GetBulkData(arg1 context.Context) ([]byte, error) {
	fake.getBulkDataMutex.Lock()
	ret, specificReturn := fake.getBulkDataReturnsOnCall[len(fake.getBulkDataArgsForCall)]
	fake.getBulkDataArgsForCall = append(fake.getBulkDataArgsForCall, struct {
		arg1 context.Context
	}{arg1})
	fake.recordInvocation("GetBulkData", []interface{}{arg1})
	fake.getBulkDataMutex.Unlock()
	if fake.GetBulkDataStub != nil {
		return fake.GetBulkDataStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.getBulkDataReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEDGARClient) GetBulkDataCallCount() int {
	fake.getBulkDataMutex.RLock()
	defer fake.getBulkDataMutex.RUnlock()
	return len(fake.getBulkDataArgsForCall)
}

func (fake *FakeEDGARClient) GetBulkDataCalls(stub func(context.Context) ([]byte, error)) {
	fake.getBulkDataMutex.Lock()
	defer fake.getBulkDataMutex.Unlock()
	fake.GetBulkDataStub = stub
}

func (fake *FakeEDGARClient) GetBulkDataArgsForCall(i int) context.Context {
	fake.getBulkDataMutex.RLock()
	defer fake.getBulkDataMutex.RUnlock()
	argsForCall := fake.getBulkDataArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeEDGARClient) GetBulkDataReturns(result1 []byte, result2 error) {
	fake.getBulkDataMutex.Lock()
	defer fake.getBulkDataMutex.Unlock()
	fake.GetBulkDataStub = nil
	fake.getBulkDataReturns = struct {
		result1 []byte
		result2 error
	}{result1, result2}
}

func (fake *FakeEDGARClient) GetBulkDataReturnsOnCall(i int, result1 []byte, result2 error) {
	fake.getBulkDataMutex.Lock()
	defer fake.getBulkDataMutex.Unlock()
	fake.GetBulkDataStub = nil
	if fake.getBulkDataReturnsOnCall == nil {
		fake.getBulkDataReturnsOnCall = make(map[int]struct {
			result1 []byte
			result2 error
		})
	}
	fake.getBulkDataReturnsOnCall[i] = struct {
		result1 []byte
		result2 error
	}{result1, result2}
}

func (fake *FakeEDGARClient) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.getBulkDataMutex.RLock()
	defer fake.getBulkDataMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeEDGARClient) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ edgarimporter.EDGARClient = new(FakeEDGARClient)
